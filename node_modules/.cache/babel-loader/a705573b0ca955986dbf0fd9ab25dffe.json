{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport api from \"../services/API\";\nexport class Store {\n  constructor() {\n    this.movies = [];\n    this.loading = false;\n\n    this.fetchMovies = async search => {\n      if (this.loading) {\n        return;\n      }\n\n      this.setLoading(true);\n\n      try {\n        const movies = await api.getMovies(search);\n        this.setMovies(movies);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n  setMovies(movies) {\n    this.movies = movies;\n  }\n\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n}","map":{"version":3,"sources":["/home/manoel/Codigos/treinamento/aulas/05/reactmovies/src/Home/store.ts"],"names":["makeAutoObservable","api","Store","constructor","movies","loading","fetchMovies","search","setLoading","getMovies","setMovies","e","console","error"],"mappings":"AAAA,SAASA,kBAAT,QAAgD,MAAhD;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,MAAMC,KAAN,CAAa;AAChBC,EAAAA,WAAW,GAAE;AAAA,SAGNC,MAHM,GAGkB,EAHlB;AAAA,SAINC,OAJM,GAIa,KAJb;;AAAA,SAWNC,WAXM,GAWQ,MAAOC,MAAP,IAA0B;AAC3C,UAAI,KAAKF,OAAT,EAAiB;AACb;AACH;;AACD,WAAKG,UAAL,CAAgB,IAAhB;;AACA,UAAG;AACC,cAAMJ,MAAM,GAAI,MAAMH,GAAG,CAACQ,SAAJ,CAAcF,MAAd,CAAtB;AACA,aAAKG,SAAL,CAAeN,MAAf;AACH,OAHD,CAGE,OAAMO,CAAN,EAAS;AACPC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,OALD,SAKU;AACN,aAAKH,UAAL,CAAgB,KAAhB;AACH;AACJ,KAxBY;;AACTR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAGMU,EAAAA,SAAS,CAACN,MAAD,EAAuB;AACnC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACMI,EAAAA,UAAU,CAACH,OAAD,EAAkB;AAC/B,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAXe","sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport * as types from '../declarations/types';\nimport api from \"../services/API\";\n\nexport class Store  {\n    constructor(){\n        makeAutoObservable(this);\n    }\n    public movies: types.Movie[] = [];\n    public loading: boolean = false;\n    public setMovies(movies: types.Movie[]){\n        this.movies = movies;\n    }\n    public setLoading(loading: boolean){\n        this.loading = loading;\n    }\n    public fetchMovies = async (search: string) => {\n        if( this.loading){\n            return;\n        }\n        this.setLoading(true);\n        try{\n            const movies  = await api.getMovies(search);\n            this.setMovies(movies);\n        } catch(e) {\n            console.error(e);\n        } finally {\n            this.setLoading(false);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}