{"ast":null,"code":"import { makeAutoObservable, autorun } from \"mobx\";\nimport api from \"../services/API\";\nexport class Store {\n  constructor() {\n    this.movies = [];\n    this.loading = false;\n    this.search = '';\n\n    this.fetchMovies = async () => {\n      if (this.loading) {\n        return;\n      }\n\n      ;\n      this.setLoading(true);\n\n      try {\n        const movies = await api.getMovies(this.search);\n        this.setMovies(movies);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.setLoading(false);\n      }\n\n      ;\n    };\n\n    this.grito = \"tatakae\";\n    this.poderDeLuta = 1;\n    this.temporada = 1;\n    this.dano = 0;\n    this.pensamento = null;\n    makeAutoObservable(this);\n    autorun(() => {\n      if (this.search === \"F\") {\n        console.log(\"ouviu\");\n        this.poderDeLuta = 99999;\n      } else if (this.search === \"A\") {\n        console.log(\"deu ruim\");\n        this.poderDeLuta = 99999;\n      }\n    });\n  }\n\n  setSearch(search) {\n    this.search = search;\n  }\n\n  setMovies(movies) {\n    this.movies = movies;\n  }\n\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n  get calcularDano() {\n    return this.poderDeLuta * this.temporada;\n  }\n\n  proximaTemprada() {\n    this.temporada++;\n  }\n\n  ouvir(fala) {\n    this.pensamento = this.search;\n    console.log(\"pensamento\", this.pensamento);\n  }\n\n}\n;","map":{"version":3,"sources":["/home/manoel/Codigos/treinamento/aulas/05/reactmovies/src/Home/store.ts"],"names":["makeAutoObservable","autorun","api","Store","constructor","movies","loading","search","fetchMovies","setLoading","getMovies","setMovies","e","console","error","grito","poderDeLuta","temporada","dano","pensamento","log","setSearch","calcularDano","proximaTemprada","ouvir","fala"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,OAA7B,QAA4C,MAA5C;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,MAAMC,KAAN,CAAY;AACfC,EAAAA,WAAW,GAAG;AAAA,SAYPC,MAZO,GAYiB,EAZjB;AAAA,SAaNC,OAbM,GAaa,KAbb;AAAA,SAcNC,MAdM,GAcW,EAdX;;AAAA,SA2BNC,WA3BM,GA2BQ,YAAY;AAC9B,UAAI,KAAKF,OAAT,EAAkB;AACd;AACH;;AAAA;AACD,WAAKG,UAAL,CAAgB,IAAhB;;AAEI,UAAI;AACA,cAAMJ,MAAM,GAAG,MAAMH,GAAG,CAACQ,SAAJ,CAAc,KAAKH,MAAnB,CAArB;AACA,aAAKI,SAAL,CAAeN,MAAf;AACH,OAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,OALD,SAKU;AACN,aAAKH,UAAL,CAAgB,KAAhB;AACH;;AAAA;AACR,KAzCa;;AAAA,SA2CVM,KA3CU,GA2CF,SA3CE;AAAA,SA4CVC,WA5CU,GA4CI,CA5CJ;AAAA,SA6CVC,SA7CU,GA6CE,CA7CF;AAAA,SA8CVC,IA9CU,GA8CH,CA9CG;AAAA,SAuDPC,UAvDO,GAuDqB,IAvDrB;AACVnB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAC,IAAAA,OAAO,CAAC,MAAM;AACV,UAAI,KAAKM,MAAL,KAAe,GAAnB,EAAwB;AACpBM,QAAAA,OAAO,CAACO,GAAR,CAAY,OAAZ;AACA,aAAKJ,WAAL,GAAmB,KAAnB;AACH,OAHD,MAGO,IAAG,KAAKT,MAAL,KAAgB,GAAnB,EAAuB;AAC1BM,QAAAA,OAAO,CAACO,GAAR,CAAY,UAAZ;AACA,aAAKJ,WAAL,GAAmB,KAAnB;AACH;AACJ,KARM,CAAP;AASH;;AAKMK,EAAAA,SAAS,CAACd,MAAD,EAAiB;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACMI,EAAAA,SAAS,CAACN,MAAD,EAAwB;AACpC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEOI,EAAAA,UAAU,CAACH,OAAD,EAAmB;AACjC,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAuBmB,MAAZgB,YAAY,GAAG;AACzB,WAAO,KAAKN,WAAL,GAAmB,KAAKC,SAA/B;AACA;;AAEMM,EAAAA,eAAe,GAAI;AACzB,SAAKN,SAAL;AACA;;AAIKO,EAAAA,KAAK,CAACC,IAAD,EAAsB;AAC9B,SAAKN,UAAL,GAAkB,KAAKZ,MAAvB;AACAM,IAAAA,OAAO,CAACO,GAAR,CAAY,YAAZ,EAA0B,KAAKD,UAA/B;AACH;;AA9DkB;AAgElB","sourcesContent":["import { makeAutoObservable, autorun } from \"mobx\";\nimport * as types from '../declarations/types';\nimport api from \"../services/API\";\n\nexport class Store {\n    constructor() {\n        makeAutoObservable(this);\n        autorun(() => {\n            if (this.search=== \"F\") {\n                console.log(\"ouviu\");\n                this.poderDeLuta = 99999;\n            } else if(this.search === \"A\"){ \n                console.log(\"deu ruim\")\n                this.poderDeLuta = 99999;\n            }\n        })\n    };\n    public movies: types.Movie[] = [];\n    public  loading: boolean = false;\n    public  search: string = '';\n    \n    public setSearch(search: string) {\n        this.search = search;\n    };\n    public setMovies(movies: types.Movie[]) {\n        this.movies = movies;\n    };\n\n    public  setLoading(loading: boolean) {\n        this.loading = loading;\n    };\n\n    public  fetchMovies = async () => {\n        if (this.loading) {\n            return;\n        };\n        this.setLoading(true);\n\n            try {\n                const movies = await api.getMovies(this.search);\n                this.setMovies(movies);\n            } catch (e) {\n                console.error(e);\n            } finally {\n                this.setLoading(false);\n            };\n    };\n\n\tpublic grito = \"tatakae\";\n\tpublic poderDeLuta = 1;\n\tpublic temporada = 1;\n\tpublic dano = 0;\n\n\tpublic get calcularDano() {\n\t\treturn this.poderDeLuta * this.temporada;\n\t}\n\n\tpublic proximaTemprada(\t) {\n\t\tthis.temporada++;\n\t}\n    public pensamento: string | null = null;\n\n\npublic ouvir(fala: string | null) {\n    this.pensamento = this.search;\n    console.log(\"pensamento\", this.pensamento);\n}\n\n};"]},"metadata":{},"sourceType":"module"}