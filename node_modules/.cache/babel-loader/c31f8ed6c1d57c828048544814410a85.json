{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport api from \"../services/API\";\nexport class Store {\n  constructor() {\n    this.movies = [];\n    this.loading = false;\n    this.search = '';\n\n    this.fetchMovies = async () => {\n      if (this.loading) {\n        return;\n      }\n\n      this.setLoading(true);\n\n      try {\n        const movies = await api.getMovies(this.search);\n        this.setMovies(movies);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n  setMovies(movies) {\n    this.movies = movies;\n  }\n\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n}","map":{"version":3,"sources":["/home/manoel/Codigos/treinamento/aulas/05/reactmovies/src/Home/store.ts"],"names":["makeAutoObservable","api","Store","constructor","movies","loading","search","fetchMovies","setLoading","getMovies","setMovies","e","console","error"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AAGA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,MAAMC,KAAN,CAAY;AACfC,EAAAA,WAAW,GAAG;AAAA,SAGPC,MAHO,GAGiB,EAHjB;AAAA,SAIPC,OAJO,GAIY,KAJZ;AAAA,SAKPC,MALO,GAKU,EALV;;AAAA,SAaPC,WAbO,GAaO,YAAY;AAC7B,UAAI,KAAKF,OAAT,EAAkB;AACd;AACH;;AACD,WAAKG,UAAL,CAAgB,IAAhB;;AACA,UAAI;AACA,cAAMJ,MAAM,GAAG,MAAMH,GAAG,CAACQ,SAAJ,CAAc,KAAKH,MAAnB,CAArB;AACA,aAAKI,SAAL,CAAeN,MAAf;AACH,OAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,OALD,SAKU;AACN,aAAKH,UAAL,CAAgB,KAAhB;AACH;AACJ,KA1Ba;;AACVR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAIMU,EAAAA,SAAS,CAACN,MAAD,EAAwB;AACpC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEMI,EAAAA,UAAU,CAACH,OAAD,EAAmB;AAChC,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAbc","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { type } from \"os\";\nimport * as types from '../declarations/types';\nimport api from \"../services/API\";\n\nexport class Store {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    public movies: types.Movie[] = [];\n    public loading: boolean = false;\n    public search: string = '';\n    public setMovies(movies: types.Movie[]) {\n        this.movies = movies;\n    }\n    \n    public setLoading(loading: boolean) {\n        this.loading = loading;\n    }\n    public fetchMovies = async () => {\n        if (this.loading) {\n            return;\n        }\n        this.setLoading(true);\n        try {\n            const movies = await api.getMovies(this.search);\n            this.setMovies(movies);\n        } catch (e) {\n            console.error(e);\n        } finally {\n            this.setLoading(false);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}